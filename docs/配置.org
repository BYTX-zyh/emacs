本文包含一些emacs的配置思路和插件推荐,遵循如下规则:

1. 配置思路与推荐根据功能进行分类
2. 不对推荐插件与配置进行详细解析
   插件推荐只给出功能介绍,其余内容自行查看推荐处给出的链接.
   给出插件的个人配置地址均在 ~emacs/site-lisp/config/init-插件名称.el~ 中.
   相关所有
   如为重要需讲解插件会单独进行讲解.

* 配置思路

** TODO 软件包管理

软件包管理采用了 submodule 的方式进行管理,每个加载的软件包都采用 ~git submodule~ 的方式添加到了 ~site-lisp/extensions~ 位置,而后由 ~init.el~ 中的[[https://github.com/BYTX-zyh/emacs/blob/master/init.el#L10][add-subdirs-to-load-path]]添加到 ~load-path~ ,使用时只需 ~require~ 对应的文件即可.

管理软件包的思路:
- 找到一个可能需要的软件包
  clone 到 site-lisp/extensions 目录下,而后require并根据其介绍进行配置使用,查看其是否为需要的内容,如果其功能不符合要求则将其删除即可
- 确定为需要使用的软件包
  首先删除其 clone 版本,而后 ~git submodule add <url>~ 即可.
- 删除不再使用的submodule
  使用 ~git rm --cached site-lisp/extensions/<package>~ 删除git记录,而后删除对应的文件,将其从submodule文件移除即可.

** TODO lazy-load

软件包的加载采用[[https://github.com/manateelazycat/lazy-load][lazy-load]]进行加载,lazy-load仅在按下对应的按键后加载插件并执行功能,有效提高了emacs的加载速度,同时缓解启动压力,便于管理一些并要使用的功能,同时提供了对应的快捷键管理功能.

** TODO 快捷键管理

使用lazy-load与hydra进行管理.

hydra:

每个hydra配置的快捷键形式如下所示:
#+begin_src elisp
(defhydra hydra-awesome (awesome-map awesome-binding awesome-plist)
  awesome-docstring
  awesome-head-1
  awesome-head-2
  awesome-head-3
  ...)
#+end_src

- hydra-awesome
  每一个hydra都需要一个名字,为 hydra-awesome . 例如 hydra-zoom、hydra-helm等.
- awesome-map 与 awesome-binding
  这可以是任何的bind与map,例如 global-map、global-map、<f2> 等.
- awesome-plist
  用于修饰每个键的内容.

可以使用[[https://github.com/manateelazycat/one-key][one-key]]进行快捷键管理,可以方便的管理多个快捷键.

* 配置文件目录解释

配置文件目录大致如下,可能略有更改.
#+begin_src text
.
├── README.org
├── docs              # 相关一些文档
├── eaf               # eaf
├── elpa              # elpa相关内容
├── init.el           # 配置入口
├── plugFile          # 插件的一些文件目录
├── plugtemp          # 插件运行产生的内容目录
├── site-lisp         # lisp代码
│   ├── config         # 配置
│   └── extensions     # 插件
├── snippets          # snip
├── tree-sitter       # treesit相关内容
#+end_src

大部分的配置均出现在 ~site-lisp/config/init-plugname.el~ ,入口 ~init.el~ 文件调用 ~site-lisp/config/init.el~ ,而后该文件调用 ~config~ 目录下的其余插件配置.

有github 仓库的插件通常在 ~site-lisp/extension/plugname~ ,如果为单文件插件且久未维护,则存储于 ~site-lisp/extension/bytx/filename~ .

* 配置文件格式

#+begin_src
;;; Package-name.el --- Description of package

;; Author: Your Name <your.email@example.com>
;; URL: https://github.com/your-username/package-name
;; Version: 0.1
;; Package-Requires: ((emacs "24.4"))

;;; Commentary:

;; This package provides ...

;;; License:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation , either version 3 of the License, or
;; (at your option) any later version.
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Code:

;; Your code goes here

(provide 'package-name)

;;; package-name.el ends here
#+end_src

* 界面配置

** mode-line

在划分多个窗口时,通常只需要关注当前窗口的mode-line,而其余窗口的mode-line是多余的,而且占据了额外的空间.故采用[[https://github.com/manateelazycat/awesome-tray][awesome-tray]],将原本的mode-line清除改为短线,仅用于区分不同的窗口,而在minibuffer右下显示mode-line中的一些信息,例如在文件中的位置,当前 major mode,git 情况等内容.

* TODO mini buffer 增强
[[file:../src/emacs/配置.org/ivy.png]]

  首先采用[[https://github.com/abo-abo/swiper#ivy][ivy]]增强功能,其提供了更快更全面的completion mechanism功能(可以简单理解为性能更好的替代？),可以在其[[https://oremacs.com/swiper/][手册]]与[[https://github.com/abo-abo/swiper/wiki][wiki]]处找到详细的细节内容.
  ivy功能简述:
  - 选择候选项
    使用 ~C-n~ 与 ~C-p~ 进行上下选择
    使用 ~M-<~ 与 ~M->~ 选择第一/最后一个候选
    使用 ~C-v~ 与 ~M-v~ 进行备选项滚动查看
    使用 ~C-m~ 或者 ~RET~ 确认选择并执行
    使用 ~TAB~ 尽可能补全内容
    使用 ~C-'~ 采用 avy 跳转
    使用 ~C-M-j~ 选择当前输入内容而非默认选择内容(例如当前匹配了init-test.el,但是输入的是init.el)
 - 窗口信息保留与恢复
   ivy 提供了一组命令 ~ivy-switch-buffer~ ~ivy-push-view~ ~ivy-pop-view~ 命令进行快速窗口切换.

* TODO 位置导航

[[file:../src/emacs/README.org/avy.gif]]
[[https://github.com/abo-abo/avy][avy]]插件提供了快捷跳转功能,类似于vim的easymotion,可以根据前缀进行当前可见范围内的行/字符/word跳转.详细信息查看:[[https://github.com/abo-abo/avy][README]],[[https://github.com/abo-abo/avy/wiki/defcustom][配置]],[[https://github.com/abo-abo/avy/wiki/custom-commands][wiki]]

* 文件的保存与恢复

** 自动保存

  采用[[https://github.com/manateelazycat/auto-save][auto-save]]插件进行文件的自动保存,该插件可以在文件停止输入后自动保存,并自动删除行尾的多余空格,如果有某些文件不希望自动保存也可以根据其规则进行配置.

** undo-tree

下载:https://www.emacswiki.org/emacs/UndoTree#h5o-2

需要queue.el

功能:激活undo tree mode

* TODO 编程工具

emacs在29版本以后添加了[[https://tree-sitter.github.io/tree-sitter/][tree-sitter]]支持,可以使用命令 ~M-x treesit-install-language-grammar~ 安装对应的treesit支持.但是该指令需要手动输入treesit的仓库,可以加载[[https://github.com/BYTX-zyh/emacs/blob/master/site-lisp/config/init-treesit.el][此配置]]自动配置对应需要的内容.

* 窗口管理

窗口相关的操作分为如下几类:
- 光标在窗口之间移动
  采用 windmove-left/down/up/right 进行移动
- 缓冲区在窗口之间的移动
  缓冲区在不同窗口的移动采用 [[https://www.emacswiki.org/emacs/buffer-move.el][buffer-move]] 的 buf-move-left/down/up/right 进行移动.
- 窗口大小调整
  窗口大小的调整采用 [[https://github.com/ramnes/move-border][move-border]] 提供的 move-border-left/down/up/right 进行调整.



* todo
 https://github.com/manateelazycat/lazycat-emacs/blob/master/site-lisp/config/init-indent.el
