
[[https://github.com/abo-abo/hydra][hydra]] 配置简介

hydra的配置结构如下所示:
#+begin_src
(defhydra hydra-awesome (awesome-map awesome-binding awesome-plist)
  awesome-docstring
  awesome-head-1
  awesome-head-2
  awesome-head-3
  ...)
#+end_src

* hydra-awesome

该字段可以为任何名称,通常建议使用 hydra- 作为开头,例如hydra-zoom等.

表示为当前配置的hydra的名字,如果其值为hydra-awesome,则 defhydra 的返回值为 hydra-awesome/body .

* awesome-map 与 awesome-binding

表示使用的mode-map 与 key-bind .例如 global-map、isearch-mode-map、"<f2>" 等.

如果不需要可以直接写nil 或者为空不写.

但是个人不建议在此处使用这两个值,有两点原因:
一是因为在这里直接绑定与lazy-load冲突,无法发挥lazy-load的优势;
二是在此处绑定的话必须按下某一个绑定的键之后才会弹出提示窗口,而非按下前置键后直接弹出窗口.一般而言我需要在按下前置键后直接弹出提示,这样我就可以只记忆前置键即可.

更详细的官方解释查看[[https://github.com/abo-abo/hydra/wiki/Binding-Styles][此处]].

* awesome-plist
关于plist的详情查看[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Lists.html][此处]].

awesome-plist可以用于修饰列表中的每个键,其具有如下可选值:

** :pre / :post

用于指定每一个键执行前后调用的代码,例如:
#+begin_src
(defhydra hydra-vi (:pre (set-cursor-color "#40e0d0")
                    :post (progn
                            (set-cursor-color "#ffffff")
                            (message
                             "Thank you, come again.")))
  "vi"
  ("l" forward-char)
  ("h" backward-char)
  ("j" next-line)
  ("k" previous-line)
  ("q" nil "quit"))
#+end_src

:pre 使得每次调用任何 awesome-head 时，光标颜色都会改变。当 hydra 退出时，光标颜色将再次变为黑色 (:post) 。

** :exit

:exit 键被每个 head 继承（他们可以覆盖它）并影响执行 head 命令后会发生什么：
- :exit nil （默认值）
  表示 hydra 状态将继续 - 仍然会看到hydra.
- :exit t
  表示退出 hydra

** :foreign-keys

表示按下未定义的键执行的操作:
- :foreign-keys nil
  停止hydra
- :foreign-keys warn
  不停止hydra但是发出警告
- :foreign-keys run
  不停止hydra且尝试运行foreign-key

** :color

:color 聚合了如下功能:

#+begin_src
| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |
#+end_src

** :timeout

表示hydra的等待时间,在timeout达到后关闭hydra提示,按下任何一个键都会刷新timeout的计时.

** :hint

:hint的值将被每个head继承,当然可以被覆盖.将其设置为nil也是有意义的,详细内容查看下文的head hint的解释.

** :bind

表示键绑定

* awesome-docstring

这可以是用于构建最终 hydra 提示的简单字符串。但是，如果您以换行符开头，则会启用键高亮显示和 Ruby 风格的字符串插值，

要突出显示一个键，只需将其用下划线包裹起来。请注意，密钥必须属于其中一个头。该键将以适合该键行为的颜色突出显示，即如果该键将使九头蛇退出，则颜色将为蓝色。

要插入空字符，请使用 ^ 。唯一的用途是让您的代码与结果一样好地对齐。

要插入动态 Elisp 变量，请使用 % ` 后跟变量。每次变量由于 head 而改变时，文档字符串都会更新。可以使用 format 样式的宽度说明符。

要插入动态 Elisp 表达式，请使用例如 %(length (dired-get-marked-files)) 。例如，如果 head 会更改标记文件的数量，则会适当更新。

如果 Elisp 表达式的结果是一个字符串并且您不想引用它，请使用这种形式： %s(shell-command-to-string "du -hs") 。

* awesome-head-1

每一个awesome-head的格式如下:
#+begin_src
(head-binding head-command head-hint head-plist)
#+end_src

** head-binding

head-binding 是一个可以传递给 kbd 的字符串。

** head-command

head-command 可以是:
- command name
  命令名,例如text-scale-increase.
- 一个lambda表达式
  #+begin_src
      ("g" (lambda ()
         (interactive)
         (let ((current-prefix-arg 4))
           (call-interactively #'magit-status)))
       "git")
  #+end_src
- nil
  表示退出
- sexp
  一个单一的 sexp，它将被包裹在一个交互式的 lambda 中。

  #+begin_src
    (defhydra hydra-launcher (:color blue)
   "Launch"
   ("h" man "man")
   ("r" (browse-url "http://www.reddit.com/r/emacs/") "reddit")
   ("w" (browse-url "http://www.emacswiki.org/") "emacswiki")
   ("s" shell "shell")
   ("q" nil "cancel"))
(global-set-key (kbd "C-c r") 'hydra-launcher/body)
  #+end_src



** head-hint

如果正文文档字符串很大，您通常不希望显示头部提示，因为您已经在正文文档字符串中记录了它。您可以将 head hint 设置为 nil 来执行此操作。

** head-plist

这是可以在每个头部中覆盖的主体键列表

:exit
:color
:bind
:column
